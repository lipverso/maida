package com.maida.demo.service;

import java.util.Date;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.oauth2.common.exceptions.InvalidTokenException;
import org.springframework.stereotype.Service;

import com.maida.demo.exception.ExistingEmailException;
import com.maida.demo.exception.ExpiredTokenException;
import com.maida.demo.exception.InvalidLoginException;
import com.maida.demo.model.Login;
import com.maida.demo.model.User;
import com.maida.demo.repository.UserRepository;

import io.jsonwebtoken.Claims;

@Service
public class UserAuthenticationService {
	
	private UserRepository userRepository;
	
	private TokenService tokenService;
	
	@Autowired
	public UserAuthenticationService (UserRepository userRepository, TokenService tokenService) {
		this.userRepository = userRepository;
		this.tokenService = tokenService;
	}

	public User authenticate(Login data, String authToken) {
		User user = userRepository.findByEmail(data.getEmail()).orElseThrow(ExistingEmailException::new);
		boolean isValidPassword = data.getPassword().equals(user.getPassword());
		
		if (isValidPassword && !authToken.isEmpty() && validate(authToken)) {
			 return user;
		} else {
			throw new InvalidLoginException();
		}
	}

	private boolean validate(String authToken) {
		try {
			String validTokenString = authToken.replace("Bearer","");
			Claims claims = tokenService.decodeToken(authToken);
			System.out.println(claims.getIssuer());
			System.out.println(claims.getIssuedAt());
			
			if(claims.getExpiration().before(new Date(System.currentTimeMillis()))) {
				throw new ExpiredTokenException();
			}
			return true;
		} catch (ExpiredTokenException e) {
			e.printStackTrace();
		} catch (Exception e) {
			e.printStackTrace();
			throw new InvalidTokenException("The token is not valid");
		}
		return false;
	}

}
